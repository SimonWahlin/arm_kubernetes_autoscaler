{
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "resourceName": {
            "type": "string",
            "metadata": {
                "description": "The name of the Managed Cluster resource."
            }
        },
        "requesterID": {
            "type": "string",
            "defaultValue": "ekdss",
            "metadata": {
                "description": "The ID of requester."
            }
        },
        "featureID": {
            "type": "string",
            "defaultValue": "ekdss",
            "metadata": {
                "description": "The Feature ID linked to JIRA."
            }
        },
        "minCount": {
            "type": "int",
            "defaultValue": 1,
            "metadata": {
                "description": "The number of min agent nodes for the cluster."
            }
        },
        "maxCount": {
            "type": "int",
            "defaultValue": 3,
            "metadata": {
                "description": "The number of max agent nodes for the cluster."
            }
        },
        "location": {
            "type": "string",
            "metadata": {
                "description": "The location of AKS resource."
            }
        },
        "dnsPrefix": {
            "type": "string",
            "metadata": {
                "description": "Optional DNS prefix to use with hosted Kubernetes API server FQDN."
            }
        },
        "osDiskSizeGB": {
            "type": "int",
            "defaultValue": 512,
            "metadata": {
                "description": "Disk size (in GB) to provision for each of the agent pool nodes. This value ranges from 0 to 1023. Specifying 0 will apply the default disk size for that agentVMSize."
            },
            "minValue": 0,
            "maxValue": 1023
        },
        "agentCount": {
            "type": "int",
            "defaultValue": 1,
            "metadata": {
                "description": "The number of agent nodes for the cluster."
            },
            "minValue": 1,
            "maxValue": 50
        },
        "agentVMSize": {
            "type": "string",
            "defaultValue": "Standard_D32s_v3",
            "metadata": {
                "description": "The size of the Virtual Machine."
            }
        },
        "kubernetesVersion": {
            "type": "string",
            "defaultValue": "1.12.6",
            "metadata": {
                "description": "The version of Kubernetes."
            }
        },
        "enableHttpApplicationRouting": {
            "type": "bool",
            "defaultValue": true,
            "metadata": {
                "description": "boolean flag to turn on and off of http application routing"
            }
        },
        "networkPlugin": {
            "type": "string",
            "allowedValues": [
                "azure",
                "kubenet"
            ],
            "metadata": {
                "description": "Network plugin used for building Kubernetes network."
            }
        },
        "enableAutoScaling": {
            "type": "bool",
            "defaultValue": true,
            "metadata": {
                "description": "boolean flag to turn on and off of auto scaling"
            }
        },
        "maxPods": {
            "type": "int",
            "defaultValue": 30,
            "metadata": {
                "description": "Maximum number of pods that can run on a node."
            }
        },
        "enableRBAC": {
            "type": "bool",
            "defaultValue": true,
            "metadata": {
                "description": "boolean flag to turn on and off of RBAC"
            }
        },
        "existingVirtualNetworkName": {
            "type": "string",
            "metadata": {
                "description": "Existing Virtual Network Name"
            }
        },
        "existingVirtualNetworkResourceGroup": {
            "type": "string",
            "metadata": {
                "description": "Existing Virtual Network Resource Group Name"
            }
        },
        "existingSubnetName": {
            "type": "string",
            "metadata": {
                "description": "Existing Subnet Name"
            }
        },
        "serviceCidr": {
            "type": "string",
            "metadata": {
                "description": "A CIDR notation IP range from which to assign service cluster IPs."
            }
        },
        "dnsServiceIP": {
            "type": "string",
            "metadata": {
                "description": "Containers DNS server IP address."
            }
        },
        "dockerBridgeCidr": {
            "type": "string",
            "metadata": {
                "description": "A CIDR notation IP for Docker bridge."
            }
        },
        "osType": {
            "type": "string",
            "defaultValue": "Linux",
            "allowedValues": [
                "Linux"
            ],
            "metadata": {
                "description": "The type of operating system."
            }
        },
        "servicePrincipalClientId": {
            "type": "securestring",
            "metadata": {
                "description": "Service principle client ID"
            }
        },
        "servicePrincipalClientSecret": {
            "type": "securestring",
            "metadata": {
                "description": "Service principle client key"
            }
        }
    },
    "variables": {
        "vnetSubnetID": "[resourceId(parameters('existingVirtualNetworkResourceGroup'),'Microsoft.Network/virtualNetworks/subnets',parameters('existingVirtualNetworkName'),parameters('existingSubnetName'))]"
    },
    "resources": [
        {
            "type": "Microsoft.ContainerService/managedClusters",
            "name": "[parameters('resourceName')]",
            "apiVersion": "2018-08-01-preview",
            "location": "[parameters('location')]",
            "dependsOn": [],
            "properties": {
                "kubernetesVersion": "[parameters('kubernetesVersion')]",
                "dnsPrefix": "[parameters('dnsPrefix')]",
                "enableRBAC": "[parameters('enableRBAC')]",
                "addonProfiles": {
                    "httpApplicationRouting": {
                        "enabled": "[parameters('enableHttpApplicationRouting')]"
                    }
                },
                "servicePrincipalProfile": {
                    "clientId": "[parameters('servicePrincipalClientId')]",
                    "secret": "[parameters('servicePrincipalClientSecret')]"                   
                },
                "agentPoolProfiles": [
                    {
                        "name": "agentpool",
                        "count": "[parameters('agentCount')]",
                        "vmSize": "[parameters('agentVMSize')]",
                        "vnetSubnetID": "[variables('vnetSubnetID')]",
                        "maxPods": "[parameters('maxPods')]",
                        "osType": "[parameters('osType')]",
                        "osDiskSizeGB": "[parameters('osDiskSizeGB')]",
                        "storageProfile": "ManagedDisks",
                        "enableAutoScaling": "[parameters('enableAutoScaling')]",
                        "minCount": "[parameters('minCount')]",
                        "maxCount": "[parameters('maxCount')]",
                        "type": "VirtualMachineScaleSets"
                    }
                ],
                "networkProfile": {
                    "networkPlugin": "[parameters('networkPlugin')]",
                    "serviceCidr": "[parameters('serviceCidr')]",
                    "dnsServiceIP": "[parameters('dnsServiceIP')]",
                    "dockerBridgeCidr": "[parameters('dockerBridgeCidr')]"
                }
            },
            "tags": {
                "Environment ": "Dev",
                "Partner": "EK_DataScience",
                "Requester": "[parameters('requesterID')]",
                "Feature": "[parameters('featureID')]"
            }
        }
    ],
    "outputs": {
        "controlPlaneFQDN": {
            "type": "string",
            "value": "[reference(concat('Microsoft.ContainerService/managedClusters/', parameters('resourceName'))).fqdn]"
        }
    }
}